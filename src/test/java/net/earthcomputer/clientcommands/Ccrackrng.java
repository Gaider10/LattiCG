package net.earthcomputer.clientcommands;

import com.seedfinding.latticg.math.component.BigMatrix;
import com.seedfinding.latticg.math.component.BigVector;
import com.seedfinding.latticg.math.lattice.enumerate.EnumerateRt;
import com.seedfinding.latticg.math.optimize.Optimize;
import com.seedfinding.latticg.util.DeserializeRt;
import java.util.stream.LongStream;

// CLASS GENERATED BY LATTICG, DO NOT EDIT MANUALLY
public final class Ccrackrng {
    private Ccrackrng() {}
    private static final BigMatrix BASIS = DeserializeRt.mat(
        "ᐔ鏉\ud99b얮Ȃ췿붶\ue8bc\u0602颲랗쫗Ă쪅鿗ꮵĂ蟝\udeb3\uec36ʦ评통\uea0b˓\ufdd8못\uee02ʣ없\uf087묊ʸ\ue089铚\uda08˹\udced\ue7a9褑˺좌ꛂ句ˤ馏貹錅˦\uf8b5飺逌ʜ캱\ua6fe" +
        "錁ʢ\ue0b7웳눅˨鎩\ue8bb숄ʜ\ueca8엫찎ʸ횽\uf39d븃ʤ\ue8d3\ue7e8ﰇʸ蛔郳퐊ʫﳯ튓震ʤ鲕ꚗ鐉ʸﻃ鎠\uf602˿\ua7e2ꃗﬆʏ\ue6a6𣏕괆˓\ue895꣖쐌ʖꧺ\uf1d6鴈˻闟\uf7de専꧐运覌܂馲랗쫗Ă" +
        "\uf2c7킲웛Ђ\uedd5\uf3b4쁬ʓ짙鯅긂ʕ\ue293퓩\ude0bʇ\uebe8瑩験ˈ쾟\ueda0ꬄˬ\ue398럻쀃˘\ued93믓猂귩껹\ud9beंꦢꖤ\uf4f1ਂ\ue3e7\uf3d1폪ଂ귅\ue594첿Ђ\ud8f5ꎸꛒ" +
        "ࠂ\ua7ee풬폑̂\uf7a1\u9ff1﯁܂\uebe5낋\uf485Ԃ\ude8f냃폳ࠂ軯Ɬ诂Ȃ\uf8ed袧ꎙข맾쎓ꃶȂ諴\udac9\ue287̂ﶜ삫탐Ђ\uabfc\uefd2鎗܂ﳄ\uf5f2눥ʏ\udc9c鯻贒ʨ샭룜褁˼銵\uf385" +
        "震˸펌힂\ue20eʽ\ueaf9莜ᴂ觼藲낊܂믆ꏻ햖Ȃ붖雄貹Ԃ规벅飢Ђ틁趧얓Ђ슆鳤쒷ंꏓ鿤\udeebଂ蚛\ue3cd鶌ᄂ讉삺褑˩邯跨\uea09˙\uf5a3뢦툈˂\ue4a8ꖎ꼉ʴ\udad9ﾑ예ˣ\ue7f3퇓\uea0bʵ틆쮰\ue103ʊꂣ" +
        "蛕봂˹뷐\ue084팇ˌ\ue3f6횺꜈ʘ\uddb6\ud8a1숁˴\uda90賕ꌌ˩닷쏰＄ʳ랛誚娂跡郺뮕̂\ue9da銔\uf765ʗ뗬ꓣ꼉˧ꇹ藞輄˻诸\uf8fa\uf101ʎ쳷뺶漂뺪袝ﶯԂ룷뢟룯\u0602裄벅飢Ђ\ue79bꗌ苊̂\udd91" +
        "鯐ꍏʻ욣ﯕ阂˜輦얜줆˂ꂆ궤쬇ʙﾏꢡ\uee02ʥ袸躤ᄂ룍뾞覠Ђ鷛짗\uf0d7Ԃ룽\udba9뮦ं뚒\ueabaﳰȂ鷧\ud9e5鷕\u0602룵\udaee輆ʢ풫컺ꀈʒ풃틄谅ʎ놃쏲뜆˶迎\uf8ac\ue601˦ﺂꋡ댄˘\ufada鷽쌃˨\uda92" +
        "铷攂鋢钄\udb1dʭ\udba4膌\udd0aʳ랛誚娂헜\ue99d햿ం髰\uf6b1낊ं맇\ud9d3\u9ff8ం곉ￒ뷹ंꧧ얬胔ଂ铙\uf4a3쏇ം\ud888辗龠Ă莠钫랲ࠂ钽諵鏜Ԃ꧟쓱풳Ȃ\ufaf8\ue0e8깲ʪꮟꓵ툆˶郏햿选ʾ쿿釆谍ˮ쒼" +
        "貛ꔅʉꏑﾼ鬃ʹ\uf5da\uee8f\u0602ꪡ郛쫏ࠂ뷴莙솵ࠂ뚒\ueabaﳰȂ벜뻨듗\u0602\uef81\ue582쪿Ђꣵ肃좥ଂ볊\udbc6\ue181Ȃ觝\udcdd햹ंﶙ\udc81뱈˸튆\uf4a5쀉ʦ웹췻\uf402˽藦軻\uef01" +
        "ʉ\uf588헡\ue505˲럽냤\uf712ˢ\uea92\ue4d6ꘋʾ벹ꮆ\uea03˦뿉뒚猂ꮆ\udedd뫸Ȃ\ue9cd鮭싀ࠂ\ua8df쓱풳Ȃ鿗킵ꖝം跧뇩\ue7c0̂莠钫랲ࠂ\uf590髺邅Ȃퟲ玲쮻܂裓꾄캄ਂ\uf5fa\uf1f9쾓ଂ" +
        "颀쳎裩Ԃ췞꯫賏Ă飰\udbb0郸ଂ평캎裯Ђ췚\uecec\uf6c5̂飈\udb97邏ᔂ\uf7db짇헓ਂ쟲싱헆Ԃ鯗뢑킞ం鎎\uf2ab쯊̂黖뗢몕ం즁鏋ꃇਂ裵裕\ue1e5Ԃ잌몜\ue0f5Ԃ鷵돆누ʦ웹췻\uf402˥ꋁ钴\uda11ʟ\udb93鎏" +
        "렆˨붊욈팇˥쒞ꎴ／ʸ뒲룲\ud807˝훘\udca0鈄ʸ\ue4b4蚜금ʖ췘ꦈᴂ\udda2틾쮯ं즣춮趾Ă싔탹覎܂쾍\uef8d웩\u0602\ueea6쳉\uedaaࠂꯝ\udebf\uf48cं욟\ueef6\ueaf7Ă\ud8f5颔ꖜԂ駈\udb97" +
        "邏ᔂ닠鞙뾐Ԃ铇蒾鋡Ԃ평캎裯Ђ闿覆첊Ђ몿诟ꃼ̂좱袜貲Ă闹ퟁ髸Ԃꦌ킋엵Ă궼퓕\ud9adĂ\ud8e3\uf2f0\ue4ce\u0602ꎜﯗ辠ం궘ꪇ\ue7e8̂\ud8fb놩\ue4f6܂骔闀균܂럳\ue2db쎛Ђ횳\uf0dc몆ࠂ黋鞟\uf6c7ਂ" +
        "캶삩\udfa7Ă规\ueba6讐ं좣춮趾Ă쫢낸雜Ăﷃ\uf3c2\uf6d2ࠂ雍\ud8a9蠝˼\ueb82퇳\udc02ˏ쎶\ufff8蠅˙藟랙谂˼蓮ﶚ\uf704˸\ue1c5맫\ueb05ʽ솥蛹퐃ʉ\uee80韛\uf104˻ꂡ\uf8d4\ue707" +
        "ʽ\uedf4\uf2c2ꈁ˸즆臬쌄˯귐즆舄˿겢袍茌ʞ裕꾻딍ʻ辥짓쌇ʶ\ue8ae\ueff6옋˩\uda95뷏꜈˙ﮱꧤ\uf607˿躺靖\ue001ʴ뿭袄전ʣ鳻힏ꀌʵ랈苩\ued06ˊ躬풆降˹记\ufdec項ʵ솉賮\uea01ʘ펯臚䤂\uf4cfꏀ" +
        "\ue3ebം\ue9bcꊲ\ue4f3Ȃ\uf3bf뿚ꆾĂ\uf493쮮\uf0f5̂\ue9e4힖\uedebࠂ\ud7ae뻹\uf181ం\udaf0\ueabf\uf4d7ࠂ뮖\udcdd\ue594܂캳趼苪Ă莂쿇힠ᄂ룵鎓껄ଂ柳蚁\uecc3" +
        "Ђ\udab6뒍쓞̂ꓯ추誓ࠂﮠꇸ퓧܂\udcf8駨\ud89aࠂ芭\udacf튌ࠂ馵\uedd1\ud89aംꗉ펪ꛅĂ뢋쓵鲿Ă\ue4f5\uffc8퓒ࠂ진\uf398阼˶\uf3c8\ue584먈ˤ\ue984覊！ʸ돹\ud9a5뜇ʟ\ue78a蓲" +
        "윁˒듥닮\udb01ʳ쟷뎂묊ʶꆑ鳤팍ʦ賜랍\udc02˘ꂀﾼ謊˨\ue4d7雭\ueb08˒苾膌戂풑\uddcb쏞\u0602\uf3bf뿚ꆾĂ헉증讘\u0602\udac2뮨ﺤं맅ꢖ좫Ă헣苎웚ം\ud8fe誑\ueeb9ं\ueda9ꗾ쇧\u0602" +
        "ꦑ\ue487\ue3c8ࠂ쎜親螡Ђ钺\ue1d6\uee91ं\ud886麞닆Ă쟜맵췍ం鞾\udba9\uf4baം쮽辒鲳܂ﻂ蟝鴲ʮ蓯궡锉ʉ\uf5a7\uee9c똄ʹ돹\ud9a5뜇˪\uf7c6\ue6d3쐋ʽ诞諶\ue310˶\uf3c8\ue584" +
        "먈ʼ뎒\ud886༂튞鎆\udbb5ࠂ꣏\uf798\uf281Ђ엞胲麎ဂ\uf890튮菞ጂ\ufde0퓤뗠ਂ\uf8c0쇪﮷Ђ\ue6c3\uf5fc톸Ă\ufdcc솾\ue7d2Ԃ\uf8f8쾈\ueeceं닐胡腹˟胋袈訅ʃ낝\ufaf3혂˛鋏뫎" +
        "\uea01ʖ莼뺭쨄˩럗\udbcf똂˙蚞麲영˟芛ꆈ\uf411ʍ닫귖ꐁ˃鲉ꪇꄄʌ몑ꏧ됂˪\ue39f践누ʈꗲ藁霑˵\uefec돊ꄁʘ훧\ue59bꠁˍ馔\ufbca㌂\ue9b9\uecfb튥Ђ\ueea5\ufdff\uf899\u0602듪華ﮛ" +
        "Ă\ue9e1ꚸ훮̂럭\ue7c0쬡˺잞법稂\udb89꧂軠܂펮꺄\uf7f2༂ꎞ麹꧖ᄂ즣蓵춛̂笠쾈\ueeceं\ufaed\uf498틵Ђ\ue49b莋闿ं\ue6c3\uf5fc톸Ă\ue5b3\ueeb4솣ంꋹ좼覟Ԃ\ue8a7슊\ud995" +
        "̂鳪쿢鎅Ђ룒苴ﺨ\u0602\uddf5훜英Ă짽車\uda3fʫ맿ꋷ褋ʤ뺔죑㰂룺벰苲Ԃ苡覬\uf0d7Ђ\uf2da귄\ue1bcข꺦돌뷯Ԃ雌鏸태\u0602ﯺꆮ锃ʩ蒹\ua7f5鬋˨\ue1a6룖\uee03ʏ\uf7cb闥윒ʔ蒊ꮢ。\ueea5\ufdff" +
        "\uf899\u0602\uecc3닪迌Ђ調헨쐒ˈ폅\uf08c鄄ˬ覚\udea5\ue808˘링ꎫ\ueb08ʭ\uefc8ﮡ逎ʩ훿ﲓ\udc10ʞ鿙톇툁ʭ쮝趽\uf10f˘쇵꣎뤂ʧ馥铐⬂誋\ua8c6鞶̂雽\ue4c8ꯁЂꎉꦟ郐ਂ\uf391쓼釜" +
        "ం\uf8c9\uf7d1\uf1d9Ȃ맺벰苲Ԃ誡薇\uef87Ȃ蒵ﷱᨂꮹﾢ\uf789ଂﳲꮅ꫱Ԃ辛鯏힌܂ꣴ캶엂Ԃ薿\uf5fb\uf56c˸꾆\uf3ca脉ʽ\uf8d8\ue1e7\uf205˸\udf8b雌뤎ʻ쯀跌꼅ʽ꒻\ue1d8뜆ʉ\ue8ee" +
        "늗鐊ʯ跫\ue2a0\ue502ʿ킦컔씄˞펉ꋴꨄ˻覃꺎ꌇ˶觷낒\uf301ʘ鯅\ue5fe䘂\ud9c1\uf5a8캹Ȃ슍跌\ueeaeԂ춻运龨ं麟\ud9d1蟒Ă떼殮잇ଂ諍鏉量ం蓮\ue78d\ue8bdȂ쳹\uf6f0틦̂颉\udab5놵\u0602" +
        "\uf4e4\ue99b춽Ȃ\ue986鲶瘟ं");
    private static final BigMatrix ROOT_INV = DeserializeRt.mat(
        "ᐔʀ肀肀耠\u0a80肀肀肀ă肀肀肀 肀肀肀老ހ肀肀肀Ă肀肀肀䀋肀肀肀老\2\u0380肀肀耠\u0380肀肀耠ހ肀肀聀ʀ肀肀聀\u0380肀肀耠ڀ肀肀肀Ć肀肀肀老\2ހ肀肀聀\2ڀ肀肀聀\u0380肀肀聀\u0380肀肀聀\u0380肀肀肀Ć肀肀肀" +
        "老\u0380肀肀聀ʀ肀肀肀Ă肀肀肀䀆肀肀肀老ʀ肀肀肀ă肀肀肀䀃肀肀肀老\u0380肀肀肀Ć肀肀肀老\2\2ʀ肀肀聀\u0380肀肀肀Ć肀肀肀䀂肀肀肀老ހ肀肀肀ċ肀肀肀老\u0380肀肀聀ހ肀肀肀Ă肀肀肀䀃肀肀肀老\u0380肀肀聀ڀ肀肀肀Ă肀肀肀䀇" +
        "肀肀肀老ʀ肀肀肀ĀȂ肀肀肀䀂肀肀肀老\2ʀ肀肀肀Ă肀肀肀老ʀ肀肀肀Ă肀肀肀 肀肀肀老ʀ肀肀肀ċ肀肀肀老\u0380肀肀耠ހ肀肀聀ʀ肀肀耠\2ʀ肀肀肀ĀȂ肀肀肀䀂肀肀肀老\2ڀ肀肀肀Ċ肀肀肀老\u0380肀肀聀\u0380肀肀肀ă肀肀肀老\u0380肀" +
        "肀肀ĀȎ肀肀肀老\u0380肀肀肀ċ肀肀肀老\u0380肀肀聀\u0380肀肀聀ހ肀肀肀Ă肀肀肀䀂肀肀肀老ހ肀肀肀Ă肀肀肀䀆肀肀肀老\u0380肀肀肀Ă肀肀肀老\2\u0b80肀肀肀ĀȀȀȂ肀肀肀老\u0380肀肀聀ʀ肀肀肀Ă肀肀肀 肀肀肀䀃肀肀肀老" +
        "ʀ肀肀耠ʀ肀肀耠ހ肀肀肀ă肀肀肀䀃肀肀肀䀀ȃ肀肀肀老ʀ肀肀肀ă肀肀肀䀃肀肀肀䀃肀肀肀䀂肀肀肀 肀肀肀老ڀ肀肀肀Āȃ肀肀肀䀋肀肀肀老ʀ肀肀肀Ă肀肀肀 肀肀肀老\u0a80肀肀肀Ć肀肀肀䀃肀肀肀 肀肀肀老ʀ肀肀肀Āȃ肀肀肀䀂肀肀肀䀃肀肀肀老\u0380肀" +
        "肀肀Ă肀肀肀老\2ʀ肀肀肀Ć肀肀肀老\2ʀ肀肀肀ć肀肀肀䀃肀肀肀老ʀ肀肀肀Ă肀肀肀老\u0380肀肀聀ހ肀肀肀Ć肀肀肀老ʀ肀肀聀ʀ肀肀肀ĀȂ肀肀肀老\u0380肀肀肀ĀȂ肀肀肀老\u0b80肀肀肀Ă肀肀肀老\u0380肀肀耠\u0380肀肀肀Ă肀肀肀" +
        "老\u0380肀肀聀\2ʀ肀肀聀\u0380肀肀肀ă肀肀肀老\u0380肀肀肀ă肀肀肀䀂肀肀肀 肀肀肀䀂肀肀肀老ʀ肀肀肀Ă肀肀肀䀀ȀȂ肀肀肀䀃肀肀肀老\u0380肀肀肀Ă肀肀肀老ʀ肀肀肀ă肀肀肀老\2ʀ肀肀聀\2\u0380肀肀聀\2\u0380肀肀" +
        "聀ހ肀肀肀Ă肀肀肀老\u0380肀肀肀Ă肀肀肀䀃肀肀肀䀂肀肀肀䀀Ȃ肀肀肀老ހ肀肀肀Ć肀肀肀老\2\u0380肀肀肀Ă肀肀肀老ހ肀肀肀ă肀肀肀老ڀ肀肀肀ă肀肀肀䀃肀肀肀老ʀ肀肀聀ހ肀肀肀ă肀肀肀 肀肀肀䀂肀肀肀老\u0380肀肀聀\u0380肀肀肀Ă肀" +
        "肀肀 肀肀肀老\2\2ʀ肀肀肀Āȃ肀肀肀䀂肀肀肀老\2\u0380肀肀聀ʀ肀肀耠\u0380肀肀肀Ă肀肀肀老\2ʀ肀肀肀ă肀肀肀老\2ʀ肀肀肀Ă肀肀肀䀃肀肀肀 ȀȂ肀肀肀老ʀ肀肀肀ĀȂ肀肀肀老\u0380肀肀肀Ă肀肀肀老ހ肀肀肀ă肀肀肀䀂肀肀肀老\2" +
        "\u0380肀肀聀\2ʀ肀肀耠\2\u0380肀肀聀\2\u0380肀肀聀\u0380肀肀聀ހ肀肀肀ĀȂ肀肀肀䀀Ȁȇ肀肀肀老\2\u0380肀肀肀Āȃ肀肀肀老\u0380肀肀耠\2\u0380肀肀聀ʀ肀肀聀\u0380肀肀聀\u0380肀肀耠ʀ肀肀肀" +
        "Ă肀肀肀老\u0380肀肀肀ă肀肀肀䀀ȃ肀肀肀䀃肀肀肀老\2ʀ肀肀肀ă肀肀肀老\2\u0380肀肀聀ʀ肀肀肀Ă肀肀肀老\2\2\2\u0380肀肀聀\u0380肀肀聀ހ肀肀肀ĀȀȆ肀肀肀老ʀ肀肀肀Ć肀肀肀老\u0380肀肀肀ĀȂ肀肀肀老ڀ肀肀肀ĀȂ肀" +
        "肀肀老ʀ肀肀肀ĀȂ肀肀肀䀊肀肀肀老\2\u0380肀肀聀\2\2\u0380肀肀肀Ă肀肀肀老\2\u0380肀肀肀ă肀肀肀䀂肀肀肀 Ȁȃ肀肀肀老\u0380肀肀肀Āȃ肀肀肀老ʀ肀肀肀ă肀肀肀老ڀ肀肀肀Ă肀肀肀䀃肀肀肀老\2ʀ肀肀聀\2\2ʀ肀肀聀ʀ肀" +
        "肀肀Ă肀肀肀 肀肀肀䀂肀肀肀老\u0380肀肀肀ă肀肀肀䀃肀肀肀䀃肀肀肀老ʀ肀肀肀ć肀肀肀老\u0380肀肀肀ĀȀȂ肀肀肀 肀肀肀老\2\u0380肀肀聀ʀ肀肀聀\u0380肀肀肀Ă肀肀肀䀂肀肀肀老\2\u0380肀肀肀ă肀肀肀䀂肀肀肀䀃肀肀肀老ހ肀" +
        "肀肀ă肀肀肀䀂肀肀肀䀃肀肀肀䀂肀肀肀老ʀ肀肀聀\u0380肀肀聀\2ʀ肀肀肀Ă肀肀肀老\2ʀ肀肀聀\u0380肀肀聀ʀ肀肀肀Ă肀肀肀老\u0380肀肀耠\u0380肀肀肀ă肀肀肀老ʀ肀肀肀Ă肀肀肀老ހ肀肀肀ă肀肀肀老ʀ肀肀肀Ă肀肀肀老\u0380肀肀" +
        "肀ĀȂ肀肀肀老\u0380肀肀聀\u0380肀肀聀\u0380肀肀肀Ă肀肀肀老ʀ肀肀肀ĀȀȀȊ肀肀肀老ʀ肀肀肀Ă肀肀肀老ʀ肀肀聀ʀ肀肀肀ĀȂ肀肀肀老\2\2\u0380肀肀肀Āȃ肀肀肀老ʀ肀肀聀\u0380肀肀肀ă肀肀肀老\u0380肀肀聀");
    private static final BigVector ORIGIN = DeserializeRt.vec(
        "᐀Ȗ˴髯슒ဂ\ufae4\uf2c4說Ԃ袴ꚼ軎ᘂﺊ\ue7aa틕⸂법솖께ଂꋴ銙髨ଂ邙\ud7c9좮㸂\ue6f2얳ꎶ䌂蒩ꧻ랕㨂쪨鋏달ᴂ颿隞\uf1b3樂캇黅뺡眂쳥颭诛䠂\uf2d1\udbab蚗䜂ꂶ誠\ueac0\u0602뚙\uebef꺗戂铛\uf29b" +
        "\uf3b5Ȃ髀\ue3e3풦 ");
    private static final BigVector ROOT_ORIGIN = DeserializeRt.vec(
        "ᒛꒇ펢뎇ڀ肀肀肀Ǟ뚂\uf1e0묢肀肀肀老\udeb6英\ue0bb舄肀肀肀老ȄȂ܈\udeb6英\ue0bb숁肀肀肀䃟뚂\uf1e0뮲ʀ肀肀聀\udeb6英\ue0bbꈂ肀肀肀老\udfb6英\ue0bb舃肀肀肀老\udfb6英\ue0bb숂肀肀肀" +
        "老\udfb6英\ue0bb숂肀肀肀老鮤蟓ꊳ꜂肀肀肀老鮤蟓ꊳ윂肀肀肀老骤蟓ꊳ蜆肀肀肀老ꏉﶎ鿄㶀肀肀肀ƣ짽躟쓝\u0380肀肀肀ėࣟ뚂\uf1e0믒ƀ肀肀聀ꏉﶎ鿄\u0d80肀肀聀");

    /**
     * Finds all values of {@code seed} that could produce the given results in the following code:
     * <pre>{@code
     *    Random rand = new Random(seed ^ 0x5DEECE66DL);
     *    float nextFloat1 = rand.nextFloat();
     *    assert nextFloat1 >= minNextFloat1 && nextFloat1 < maxNextFloat1;
     *    float nextFloat2 = rand.nextFloat();
     *    assert nextFloat2 >= minNextFloat2 && nextFloat2 < maxNextFloat2;
     *    float nextFloat3 = rand.nextFloat();
     *    assert nextFloat3 >= minNextFloat3 && nextFloat3 < maxNextFloat3;
     *    float nextFloat4 = rand.nextFloat();
     *    assert nextFloat4 >= minNextFloat4 && nextFloat4 < maxNextFloat4;
     *    float nextFloat5 = rand.nextFloat();
     *    assert nextFloat5 >= minNextFloat5 && nextFloat5 < maxNextFloat5;
     *    float nextFloat6 = rand.nextFloat();
     *    assert nextFloat6 >= minNextFloat6 && nextFloat6 < maxNextFloat6;
     *    float nextFloat7 = rand.nextFloat();
     *    assert nextFloat7 >= minNextFloat7 && nextFloat7 < maxNextFloat7;
     *    float nextFloat8 = rand.nextFloat();
     *    assert nextFloat8 >= minNextFloat8 && nextFloat8 < maxNextFloat8;
     *    float nextFloat9 = rand.nextFloat();
     *    assert nextFloat9 >= minNextFloat9 && nextFloat9 < maxNextFloat9;
     *    float nextFloat10 = rand.nextFloat();
     *    assert nextFloat10 >= minNextFloat10 && nextFloat10 < maxNextFloat10;
     *    float nextFloat11 = rand.nextFloat();
     *    assert nextFloat11 >= minNextFloat11 && nextFloat11 < maxNextFloat11;
     *    float nextFloat12 = rand.nextFloat();
     *    assert nextFloat12 >= minNextFloat12 && nextFloat12 < maxNextFloat12;
     *    float nextFloat13 = rand.nextFloat();
     *    assert nextFloat13 >= minNextFloat13 && nextFloat13 < maxNextFloat13;
     *    float nextFloat14 = rand.nextFloat();
     *    assert nextFloat14 >= minNextFloat14 && nextFloat14 < maxNextFloat14;
     *    float nextFloat15 = rand.nextFloat();
     *    assert nextFloat15 >= minNextFloat15 && nextFloat15 < maxNextFloat15;
     *    float nextFloat16 = rand.nextFloat();
     *    assert nextFloat16 >= minNextFloat16 && nextFloat16 < maxNextFloat16;
     *    float nextFloat17 = rand.nextFloat();
     *    assert nextFloat17 >= minNextFloat17 && nextFloat17 < maxNextFloat17;
     *    float nextFloat18 = rand.nextFloat();
     *    assert nextFloat18 >= minNextFloat18 && nextFloat18 < maxNextFloat18;
     *    float nextFloat19 = rand.nextFloat();
     *    assert nextFloat19 >= minNextFloat19 && nextFloat19 < maxNextFloat19;
     *    float nextFloat20 = rand.nextFloat();
     *    assert nextFloat20 >= minNextFloat20 && nextFloat20 < maxNextFloat20;
     * }</pre>
     *
     * <p>This code skips 0.000000% of seeds in its search.
     */
    public static LongStream getSeeds(float minNextFloat1, float maxNextFloat1, float minNextFloat2, float maxNextFloat2, float minNextFloat3, float maxNextFloat3, float minNextFloat4, float maxNextFloat4, float minNextFloat5, float maxNextFloat5, float minNextFloat6, float maxNextFloat6, float minNextFloat7, float maxNextFloat7, float minNextFloat8, float maxNextFloat8, float minNextFloat9, float maxNextFloat9, float minNextFloat10, float maxNextFloat10, float minNextFloat11, float maxNextFloat11, float minNextFloat12, float maxNextFloat12, float minNextFloat13, float maxNextFloat13, float minNextFloat14, float maxNextFloat14, float minNextFloat15, float maxNextFloat15, float minNextFloat16, float maxNextFloat16, float minNextFloat17, float maxNextFloat17, float minNextFloat18, float maxNextFloat18, float minNextFloat19, float maxNextFloat19, float minNextFloat20, float maxNextFloat20) {
        Optimize.Builder builder = Optimize.Builder.ofSize(20);
        if (minNextFloat1 >= maxNextFloat1) {
            return LongStream.empty();
        }
        builder.withLowerBound(0, (long) (minNextFloat1 * 0x1.0p24f) << 24).withUpperBound(0, (long) (maxNextFloat1 * 0x1.0p24f) << 24);
        if (minNextFloat2 >= maxNextFloat2) {
            return LongStream.empty();
        }
        builder.withLowerBound(1, (long) (minNextFloat2 * 0x1.0p24f) << 24).withUpperBound(1, (long) (maxNextFloat2 * 0x1.0p24f) << 24);
        if (minNextFloat3 >= maxNextFloat3) {
            return LongStream.empty();
        }
        builder.withLowerBound(2, (long) (minNextFloat3 * 0x1.0p24f) << 24).withUpperBound(2, (long) (maxNextFloat3 * 0x1.0p24f) << 24);
        if (minNextFloat4 >= maxNextFloat4) {
            return LongStream.empty();
        }
        builder.withLowerBound(3, (long) (minNextFloat4 * 0x1.0p24f) << 24).withUpperBound(3, (long) (maxNextFloat4 * 0x1.0p24f) << 24);
        if (minNextFloat5 >= maxNextFloat5) {
            return LongStream.empty();
        }
        builder.withLowerBound(4, (long) (minNextFloat5 * 0x1.0p24f) << 24).withUpperBound(4, (long) (maxNextFloat5 * 0x1.0p24f) << 24);
        if (minNextFloat6 >= maxNextFloat6) {
            return LongStream.empty();
        }
        builder.withLowerBound(5, (long) (minNextFloat6 * 0x1.0p24f) << 24).withUpperBound(5, (long) (maxNextFloat6 * 0x1.0p24f) << 24);
        if (minNextFloat7 >= maxNextFloat7) {
            return LongStream.empty();
        }
        builder.withLowerBound(6, (long) (minNextFloat7 * 0x1.0p24f) << 24).withUpperBound(6, (long) (maxNextFloat7 * 0x1.0p24f) << 24);
        if (minNextFloat8 >= maxNextFloat8) {
            return LongStream.empty();
        }
        builder.withLowerBound(7, (long) (minNextFloat8 * 0x1.0p24f) << 24).withUpperBound(7, (long) (maxNextFloat8 * 0x1.0p24f) << 24);
        if (minNextFloat9 >= maxNextFloat9) {
            return LongStream.empty();
        }
        builder.withLowerBound(8, (long) (minNextFloat9 * 0x1.0p24f) << 24).withUpperBound(8, (long) (maxNextFloat9 * 0x1.0p24f) << 24);
        if (minNextFloat10 >= maxNextFloat10) {
            return LongStream.empty();
        }
        builder.withLowerBound(9, (long) (minNextFloat10 * 0x1.0p24f) << 24).withUpperBound(9, (long) (maxNextFloat10 * 0x1.0p24f) << 24);
        if (minNextFloat11 >= maxNextFloat11) {
            return LongStream.empty();
        }
        builder.withLowerBound(10, (long) (minNextFloat11 * 0x1.0p24f) << 24).withUpperBound(10, (long) (maxNextFloat11 * 0x1.0p24f) << 24);
        if (minNextFloat12 >= maxNextFloat12) {
            return LongStream.empty();
        }
        builder.withLowerBound(11, (long) (minNextFloat12 * 0x1.0p24f) << 24).withUpperBound(11, (long) (maxNextFloat12 * 0x1.0p24f) << 24);
        if (minNextFloat13 >= maxNextFloat13) {
            return LongStream.empty();
        }
        builder.withLowerBound(12, (long) (minNextFloat13 * 0x1.0p24f) << 24).withUpperBound(12, (long) (maxNextFloat13 * 0x1.0p24f) << 24);
        if (minNextFloat14 >= maxNextFloat14) {
            return LongStream.empty();
        }
        builder.withLowerBound(13, (long) (minNextFloat14 * 0x1.0p24f) << 24).withUpperBound(13, (long) (maxNextFloat14 * 0x1.0p24f) << 24);
        if (minNextFloat15 >= maxNextFloat15) {
            return LongStream.empty();
        }
        builder.withLowerBound(14, (long) (minNextFloat15 * 0x1.0p24f) << 24).withUpperBound(14, (long) (maxNextFloat15 * 0x1.0p24f) << 24);
        if (minNextFloat16 >= maxNextFloat16) {
            return LongStream.empty();
        }
        builder.withLowerBound(15, (long) (minNextFloat16 * 0x1.0p24f) << 24).withUpperBound(15, (long) (maxNextFloat16 * 0x1.0p24f) << 24);
        if (minNextFloat17 >= maxNextFloat17) {
            return LongStream.empty();
        }
        builder.withLowerBound(16, (long) (minNextFloat17 * 0x1.0p24f) << 24).withUpperBound(16, (long) (maxNextFloat17 * 0x1.0p24f) << 24);
        if (minNextFloat18 >= maxNextFloat18) {
            return LongStream.empty();
        }
        builder.withLowerBound(17, (long) (minNextFloat18 * 0x1.0p24f) << 24).withUpperBound(17, (long) (maxNextFloat18 * 0x1.0p24f) << 24);
        if (minNextFloat19 >= maxNextFloat19) {
            return LongStream.empty();
        }
        builder.withLowerBound(18, (long) (minNextFloat19 * 0x1.0p24f) << 24).withUpperBound(18, (long) (maxNextFloat19 * 0x1.0p24f) << 24);
        if (minNextFloat20 >= maxNextFloat20) {
            return LongStream.empty();
        }
        builder.withLowerBound(19, (long) (minNextFloat20 * 0x1.0p24f) << 24).withUpperBound(19, (long) (maxNextFloat20 * 0x1.0p24f) << 24);
        return EnumerateRt.enumerate(BASIS, ORIGIN, builder.build(), ROOT_INV, ROOT_ORIGIN)
            .mapToLong(vec -> (vec.get(0).getNumerator().longValue() * 0xdfe05bcb1365L + 0x615c0e462aa9L) & ((1L << 48) - 1));
    }
}
